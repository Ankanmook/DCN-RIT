head	1.6;
access;
symbols;
locks
	axm3244:1.6; strict;
comment	@// @;


1.6
date	2012.12.14.00.55.43;	author axm3244;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.13.23.14.00;	author axm3244;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.13.15.55.41;	author axm3244;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.13.07.05.56;	author axm3244;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.13.06.39.01;	author axm3244;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.13.06.04.13;	author axm3244;	state Exp;
branches;
next	;


desc
@Version 1.0
Contains Main File
@


1.6
log
@Added run session method to SSHFunctions.cpp and
signature to SSHFunctions.h
Correction in main method Changed hostname keyword
@
text
@//  $Id: remoteCMD.cpp,v 1.5 2012/12/13 23:14:00 axm3244 Exp axm3244 $

/*  SUMMARY
 *  Program to  establish an SSH connection to a DCS computer
 *  and perform operation(s) on that computer
 *  remoteCMD.cpp
 *
 *
 *  REVISION HISTORY
 *    $Log: remoteCMD.cpp,v $
 *    Revision 1.5  2012/12/13 23:14:00  axm3244
 *    Changed code in SSHFunctions.cpp and SSHFunctions.h
 *    Added another method to run session
 *    Removed code from main method
 *
 *    Revision 1.4  2012/12/13 15:55:41  axm3244
 *    Added Command Line argument in main file
 *    Added const char* in Functions.cpp
 *
 *    Revision 1.3  2012/12/13 07:05:56  axm3244
 *    Changes in main functions in remoteCMD.cpp
 *    Added termios.h Library in SSHFunctions.h
 *    Added functionality in keyboard interactive authentication
 *    Added remote exec in SSHFunctions.cpp
 *
 *    Revision 1.2  2012/12/13 06:39:01  axm3244
 *    Main File Session opening and closing written
 *    Added Header and Prepossessing Files
 *
 *    Revision 1.1  2012/12/13 06:04:13  axm3244
 *    Initial revision
 *
 */

// Referencing library and header files for pre-processing

#include "SSHFunctions.h"


using namespace std;



/*
 * Main Function
 * Program execution begins here and runs the command and passes 
 * arguments into run_session in SSHFunction.cpp
 * @@param takes two command line argumnet
 * @@return int
 */
int main(int argc,char *argv[]){

    const char* hostname;
    const char* command;

    // Check the value of argc to be 1 and
    // inform the user of how to use the program
    if ((argc < 3)&&(argc >0 )) {
        cout << "Usage is remoteCMD host-name \"command\"  ";
        cin.get();
        exit(0);
    }

    hostname = argv[1];
    command = argv[2];

    //runs the remote SSH session client
    run_session(hostname, command);

    return 0;
}



@


1.5
log
@Changed code in SSHFunctions.cpp and SSHFunctions.h
Added another method to run session
Removed code from main method
@
text
@d1 1
a1 1
//  $Id: remoteCMD.cpp,v 1.4 2012/12/13 15:55:41 axm3244 Exp axm3244 $
d11 5
d46 3
a48 2
 * Program execution begins here
 * @@param takes command line argumnet
d53 1
a53 1
    const char* machinename;
d59 1
a59 1
        cout << "Usage is remoteCMD machine-name \"command\"  ";
d64 1
a64 1
    machinename = argv[1];
d67 2
a68 1
    run_session(machinename, command);
@


1.4
log
@Added Command Line argument in main file
Added const char* in Functions.cpp
@
text
@d1 1
a1 1
//  $Id: remoteCMD.cpp,v 1.3 2012/12/13 07:05:56 axm3244 Exp axm3244 $
d11 4
a46 6
    //declaring variables
    ssh_session my_ssh_session ;
    int verbosity = SSH_LOG_PROTOCOL;
    int port = 22;
    int rc;
    char *password;
d61 1
a61 49
    //opening a new session
    my_ssh_session = ssh_new();

    //verifying that the allocation succeeded
    if (my_ssh_session == NULL)
    exit(-1);

    //setting the options to the session host to the vermont
    ssh_options_set(my_ssh_session, SSH_OPTIONS_HOST, machinename);

    //setting the session transaction to be
    //carried through the default port 22
    ssh_options_set(my_ssh_session, SSH_OPTIONS_PORT, &port);


    //connecting to the server
    rc= ssh_connect(my_ssh_session);
    if(rc !=SSH_OK){
         cerr<<"Error connecting to localhost:"
         <<ssh_get_error(my_ssh_session)<<endl;
         exit(-1);

   }


    // Keyboard-Interactive Authentication
    rc = authenticate_kbdint(my_ssh_session);

    //If the authentication is not successfull
    if (rc != SSH_AUTH_SUCCESS){
    cerr<<"Error authenticating with password:"
        <<ssh_get_error(my_ssh_session)<<endl;
    ssh_disconnect(my_ssh_session);
    ssh_free(my_ssh_session);
    exit(-1);
    }
    //For successfull authentication
    else{

    //cout<<"Authentication successfull"<<endl;
    rc = show_remote_files(my_ssh_session, command);
    }

    //diconnecting session from server
    ssh_disconnect(my_ssh_session);

    //deallocating the session
    ssh_free(my_ssh_session);

@


1.3
log
@Changes in main functions in remoteCMD.cpp
Added termios.h Library in SSHFunctions.h
Added functionality in keyboard interactive authentication
Added remote exec in SSHFunctions.cpp
@
text
@d1 1
a1 1
//  $Id: remoteCMD.cpp,v 1.2 2012/12/13 06:39:01 axm3244 Exp axm3244 $
d11 6
a61 1
    //cout<<command<<endl;
a71 4

    //setting the quantity of the messegae to be printed to high level
    // protocol information
    //ssh_options_set(my_ssh_session, SSH_OPTIONS_LOG_VERBOSITY, &verbosity);
@


1.2
log
@Main File Session opening and closing written
Added Header and Prepossessing Files
@
text
@d1 1
a1 1
//  $Id: remoteCMD.cpp,v 1.1 2012/12/13 06:04:13 axm3244 Exp axm3244 $
d11 4
a84 7

   //verifying the server's identity
   //if(verify_knownhost(my_ssh_session)<0){
   //ssh_disconnect(my_ssh_session);
   //ssh_free(my_ssh_session);
   //exit(-1);
   // }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
//  $Id$
d4 3
d10 110
a119 2
 *    $Log$
 */@
