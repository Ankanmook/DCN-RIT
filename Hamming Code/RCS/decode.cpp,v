head	1.6;
access;
symbols;
locks
	axm3244:1.6; strict;
comment	@// @;


1.6
date	2013.02.08.04.27.05;	author axm3244;	state Exp;
branches;
next	1.5;

1.5
date	2013.02.08.03.40.20;	author axm3244;	state Exp;
branches;
next	1.4;

1.4
date	2013.02.07.18.49.52;	author axm3244;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.07.18.13.02;	author axm3244;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.07.18.04.20;	author axm3244;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.30.02.32.17;	author axm3244;	state Exp;
branches;
next	;


desc
@Basic Structure
@


1.6
log
@Removed Unecessary Commenting
and Print Statements
@
text
@//  $Id: decode.cpp,v 1.5 2013/02/08 03:40:20 axm3244 Exp axm3244 $

/*  SUMMARY
 *
 *
 *  REVISION HISTORY
 *    $Log: decode.cpp,v $
 *    Revision 1.5  2013/02/08 03:40:20  axm3244
 *    Final Testing and
 *    Functionality Refinement
 *
 *    Revision 1.4  2013/02/07 18:49:52  axm3244
 *    Added Empty Check Function
 *
 *    Revision 1.3  2013/02/07 18:13:02  axm3244
 *    Adding Padding for unencoded bytes
 *
 *    Revision 1.2  2013/02/07 18:04:20  axm3244
 *    Added Bit Decoding and Reading of Bit
 *
 *    Revision 1.1  2013/01/30 02:32:17  axm3244
 *    Initial revision
 *
 *
 *
 *
 *    Author : Ankan Mookherjee
 */


# include "decode.h"
using namespace std;





void generateInt(char byte, int* rawBinaryData)
{
    int val = byte  ;
    for(int i = 0; i < RAW_BIT_SIZE; i++)
    {
       rawBinaryData[7-i] = byte&(1<< i)?1:0;
    }
}






bool checkEmpty(int *word)
{
	bool flag = true;
	for(int i=0; i < 12; i++)
	{
		if (word[i] != 0)
		{
		   flag = false;
		   break;
		}	
	}

	return flag;
}






void joinBits(int* binaryData1,int* binaryData2, int* binaryData3, int* encodedword1 , int* encodedword2 )
{
    int totalWord[24];

    for(int i=0; i < RAW_BIT_SIZE; i++)
    {
	totalWord[i] = binaryData1[i];
    }

    for(int i=8; i < 2 * RAW_BIT_SIZE ; i++)
    {
	totalWord[i] = binaryData2[i- RAW_BIT_SIZE];
    }

    for(int i=16; i < FULL_SIZE; i++)
    {
	totalWord[i] = binaryData3[i- 2 * RAW_BIT_SIZE];
    }

    /* Splitting Word into 2 parts of encoding*/
    for(int i=0; i < ENCODED_BIT_SIZE; i++)
    {
	encodedword1[i] = totalWord[i];
    }

    for(int i=12; i < FULL_SIZE; i++)
    {
	encodedword2[i-ENCODED_BIT_SIZE] = totalWord[i];
    }

}








void correctHammingBit(int * hammingbit)
{
    char outbyte;
    int errorposition[4];
    int finalErrorBit;
    int iter;
    int exponent;
    int multiplier;
    int value= 0;

    int orgininalword[8];

    /* checking parity of the Position 1 */
    int position1 = hammingbit[0]+hammingbit[2]+hammingbit[4]+hammingbit[6]+hammingbit[8]+hammingbit[10]; 

    int position2 = hammingbit[1]+hammingbit[2]+hammingbit[5]+hammingbit[6]+hammingbit[9]+hammingbit[10]; 

    int position3 = hammingbit[3]+hammingbit[4]+hammingbit[5]+hammingbit[6]+hammingbit[11];

    int position4 = hammingbit[7]+hammingbit[8]+hammingbit[9]+hammingbit[10]+hammingbit[11];



    if (position1 %2 != 0)
	errorposition[0] = 1;
    else
	errorposition[0] = 0;

    if (position2 %2 != 0)
	errorposition[1] = 2;
    else
	errorposition[1] = 0;

    if (position3 %2 != 0)
	errorposition[2] = 4;
    else
	errorposition[2] = 0;

    if (position4 %2 != 0)
	errorposition[3] = 8;
    else
	errorposition[3] = 0;

    finalErrorBit = errorposition[0] + errorposition[1] +errorposition[2] +errorposition[3] ;

    /* Correcting the code */
    if (finalErrorBit == 0)
       std::cout<<"";
    else
    {
	if (hammingbit[finalErrorBit-1] ==0)
	   hammingbit[finalErrorBit-1] = 1;
	else
	   hammingbit[finalErrorBit-1] = 0;
    }

    orgininalword[0] = hammingbit[2];
    orgininalword[1] = hammingbit[4];
    orgininalword[2] = hammingbit[5];
    orgininalword[3] = hammingbit[6];
    orgininalword[4] = hammingbit[8];
    orgininalword[5] = hammingbit[9];
    orgininalword[6] = hammingbit[10];
    orgininalword[7] = hammingbit[11];

    for(int j=0; j < RAW_BIT_SIZE; ++j)
    {
	exponent = RAW_BIT_SIZE-j-1;
	multiplier = pow(TWO ,exponent);
	value = value + orgininalword[j]*multiplier;	
    }
       outbyte = value;
       fwrite(&outbyte,1,1,stdout);		    
}







int main(void)
{
    char byte1;
    char byte2;
    char byte3;
    int binaryData1[8];
    int binaryData2[8];
    int binaryData3[8];

    int encodedword1[12];
    int encodedword2[12];
    while(fread(&byte1,1,1,stdin))
    {
	generateInt(byte1,binaryData1);
    
       if(fread(&byte2,1,1,stdin))
       {
	   generateInt(byte2,binaryData2);
       }

       if(fread(&byte3,1,1,stdin))
       {
	   generateInt(byte3,binaryData3);
       }
	
       joinBits(binaryData1, binaryData2, binaryData3, encodedword1 , encodedword2);
	

       correctHammingBit(encodedword1);

       correctHammingBit(encodedword2);
    }

    std::cout<<endl;
    return 0;
}



@


1.5
log
@Final Testing and
Functionality Refinement
@
text
@d1 1
a1 1
//  $Id: decode.cpp,v 1.4 2013/02/07 18:49:52 axm3244 Exp axm3244 $
d8 4
d176 8
a183 17
    /*If all digits are 0 or it is empty set */ 
    //if(checkEmpty(orgininalword))
	//cout<<" ";

    //else
    //{	
        for(int j=0; j < RAW_BIT_SIZE; ++j)
        {
	    exponent = RAW_BIT_SIZE-j-1;
	    multiplier = pow(TWO ,exponent);
	    value = value + orgininalword[j]*multiplier;	
        }
        outbyte = value;
        fwrite(&outbyte,1,1,stdout);		
        //std::cout<<endl;
    //}
    
a215 2

	//std::cout<<byte1<<byte2<<byte3<<endl;
a218 12
	//for(int i=0; i< 12; i++)
	//{
	//    cout<<encodedword1[i];
	//}

	//cout<<endl;
	//for(int i=0; i< 12; i++)
	//{
	//    cout<<encodedword2[i];
	//}
	//cout<<endl;

@


1.4
log
@Added Empty Check Function
@
text
@d1 1
a1 1
//  $Id: decode.cpp,v 1.3 2013/02/07 18:13:02 axm3244 Exp axm3244 $
d8 3
a31 17
void TempcreateData(int* totalWord, int* encodedword1 , int* encodedword2)
{

	for(int i=0; i < ENCODED_BIT_SIZE; i++)
	{
		encodedword1[i] = totalWord[i];
	}

	for(int i=12; i < FULL_SIZE; i++)
	{
		encodedword2[i- ENCODED_BIT_SIZE] = totalWord[i];
	}

}



d39 1
a39 2
       rawBinaryData[7-i] = byte% 2;
	byte = byte/2;
d45 3
d53 5
a57 3
		if (word[i] != 0);
		flag = false;
		break;
d64 4
d101 6
d154 1
a154 1
       std::cout<<"No error"<<endl;
d173 2
a174 2
    if(checkEmpty(orgininalword))
	cout<<" "<<endl;
d176 2
a177 2
    else
    {	
d186 2
a187 2
        std::cout<<endl;
    }
d193 5
a197 1
void decoder(int* word)
d208 1
a208 2

    if(fread(&byte1,1,1,stdin))
d211 27
a237 1
    }
d239 1
a239 4
    if(fread(&byte2,1,1,stdin))
    {
	generateInt(byte2,binaryData2);
    }
d241 1
a241 3
    if(fread(&byte3,1,1,stdin))
    {
	generateInt(byte3,binaryData3);
d244 1
a244 20
    joinBits(binaryData1, binaryData2, binaryData3, encodedword1 , encodedword2);

    correctHammingBit(encodedword1);
    correctHammingBit(encodedword2);

}


/*
 * Main Function
 * Program execution begins here and runs the command and passes
 * arguments in Decode.cpp
 * @@param takes two command line argumnet
 * @@return int
 */
int main(int argc,char *argv[])
{

    //int* a = &1;
    //decoder(a);
@


1.3
log
@Adding Padding for unencoded bytes
@
text
@d1 1
a1 1
//  $Id: decode.cpp,v 1.2 2013/02/07 18:04:20 axm3244 Exp axm3244 $
d8 3
a22 11
# include<cstdlib>
# include<iostream>
# include<stdlib.h>
# include<math.h>
# include<cstdio>


const int ENCODED_BIT_SIZE = 12;
const int FULL_SIZE = 24;
const int RAW_BIT_SIZE = 8;
const double TWO = 2.00;
d24 1
a27 11
void decoder(char* word);
void joinBits(int* binaryData1,int* binaryData2, int* binaryData3, int* encodedword1 , int* encodedword2 );
void correctHammingBit(int * word);
void generateInt(char byte, int* rawBinaryData);
void TempcreateData(int* totalWord, int* encodedword1 , int* encodedword2);






d60 14
d172 3
a174 9
    for(int j=0; j < RAW_BIT_SIZE; ++j)
    {
	exponent = RAW_BIT_SIZE-j-1;
	multiplier = pow(TWO ,exponent);
	value = value + orgininalword[j]*multiplier;	
    }
    outbyte = value;
    fwrite(&outbyte,1,1,stdout);		
    std::cout<<endl;
d176 13
d235 2
a236 2

int main(int argc,char *argv[]){
@


1.2
log
@Added Bit Decoding and Reading of Bit
@
text
@d1 1
a1 1
//  $Id: decode.cpp,v 1.1 2013/01/30 02:32:17 axm3244 Exp axm3244 $
d8 3
d27 2
a28 1
const int ENCODED_BIT_SIZE = 24;
d30 1
d50 1
a50 1
	for(int i=0; i < 12; i++)
d55 1
a55 1
	for(int i=12; i < 24; i++)
d57 1
a57 1
		encodedword2[i-12] = totalWord[i];
d82 1
a82 1
    for(int i=0; i < 8; i++)
d87 1
a87 1
    for(int i=8; i < 16; i++)
d89 1
a89 1
	totalWord[i] = binaryData2[i-8];
d92 1
a92 1
    for(int i=16; i < 24; i++)
d94 1
a94 1
	totalWord[i] = binaryData3[i-16];
d98 1
a98 1
    for(int i=0; i < 12; i++)
d103 1
a103 1
    for(int i=12; i < 24; i++)
d105 1
a105 1
	encodedword2[i-12] = totalWord[i];
d179 1
a179 1
	multiplier = pow(2.00,exponent);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
//  $Id$
d7 4
a10 1
 *    $Log$
d16 220
@
