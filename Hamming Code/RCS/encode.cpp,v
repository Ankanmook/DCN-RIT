head	1.5;
access;
symbols;
locks
	axm3244:1.5; strict;
comment	@// @;


1.5
date	2013.02.08.04.27.05;	author axm3244;	state Exp;
branches;
next	1.4;

1.4
date	2013.02.08.03.40.20;	author axm3244;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.07.18.49.52;	author axm3244;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.07.18.04.20;	author axm3244;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.30.02.32.17;	author axm3244;	state Exp;
branches;
next	;


desc
@Background File
@


1.5
log
@Removed Unecessary Commenting
and Print Statements
@
text
@//  $Id: encode.cpp,v 1.4 2013/02/08 03:40:20 axm3244 Exp axm3244 $

/*  SUMMARY
 *
 *
 *  REVISION HISTORY
 *    $Log: encode.cpp,v $
 *    Revision 1.4  2013/02/08 03:40:20  axm3244
 *    Final Testing and
 *    Functionality Refinement
 *
 *    Revision 1.3  2013/02/07 18:49:52  axm3244
 *    Added Empty Check Function
 *
 *    Revision 1.2  2013/02/07 18:04:20  axm3244
 *    Added Bit Decoding and Reading of Bit
 *
 *    Revision 1.1  2013/01/30 02:32:17  axm3244
 *    Initial revision
 *
 *
 *
 *
 *    Author : Ankan Mookherjee
 */


# include "encode.h"

using namespace std;


void generateEncodedByte(int* rawBinaryData1, int* rawBinaryData2, int* encodedByte)
{
   int parityCheck;

   encodedByte[2] =  rawBinaryData1[0];
   encodedByte[4] =  rawBinaryData1[1];
   encodedByte[5] =  rawBinaryData1[2];
   encodedByte[6] =  rawBinaryData1[3];
   encodedByte[8] =  rawBinaryData1[4];
   encodedByte[9] =  rawBinaryData1[5];
   encodedByte[10] = rawBinaryData1[6];
   encodedByte[11] = rawBinaryData1[7];
	
   encodedByte[14] =  rawBinaryData2[0];
   encodedByte[16] =  rawBinaryData2[1];
   encodedByte[17] =  rawBinaryData2[2];
   encodedByte[18] =  rawBinaryData2[3];
   encodedByte[20] =  rawBinaryData2[4];
   encodedByte[21] =  rawBinaryData2[5];
   encodedByte[22] = rawBinaryData2[6];
   encodedByte[23] = rawBinaryData2[7];
	

	
   parityCheck = encodedByte[2] + encodedByte[4] + encodedByte[6] + encodedByte[8] + encodedByte[10];
   encodedByte[0] = parityCheck % 2;

   parityCheck = encodedByte[2] + encodedByte[5] + encodedByte[6] + encodedByte[9] + encodedByte[10];
   encodedByte[1] = parityCheck % 2;
        
   parityCheck = encodedByte[4] + encodedByte[5] + encodedByte[6] + encodedByte[11];
   encodedByte[3] = parityCheck% 2; 
        
   parityCheck = encodedByte[8] + encodedByte[9] + encodedByte[10] + encodedByte[11];
   encodedByte[7] = parityCheck % 2;


   parityCheck = encodedByte[14] + encodedByte[16] + encodedByte[18] + encodedByte[20] + encodedByte[22];
   encodedByte[12] = parityCheck % 2;

   parityCheck = encodedByte[14] + encodedByte[17] + encodedByte[18] + encodedByte[21] + encodedByte[22];
   encodedByte[13] = parityCheck % 2;
        
   parityCheck = encodedByte[16] + encodedByte[17] + encodedByte[18] + encodedByte[23];
   encodedByte[15] = parityCheck % 2; 
        
   parityCheck = encodedByte[20] + encodedByte[21] + encodedByte[22] + encodedByte[23];
   encodedByte[19] = parityCheck % 2;

}





void generateBinary(char byte, int* rawBinaryData)
{
   for(int i = 0; i < RAW_BIT_SIZE; i++)
   {
       rawBinaryData[7-i] = byte&(1 << i)? 1 : 0;
   }
}





void encode()
{
   char output[3];

   char byte;
   char outbyte;
   int encodedByte[ENCODED_BIT_SIZE];
   int rawBinaryData1[RAW_BIT_SIZE];
   int rawBinaryData2[RAW_BIT_SIZE];

   int binaryData[RAW_BIT_SIZE];
   int val;
   char sendByte[2];
   int iter;
   int exponent;
   int multiplier;
   int value= 0;


   while(fread(&byte,1,1,stdin))
   {
    	if(byte == '\n' )
           break;

    	generateBinary(byte,rawBinaryData1);

    	/* Reading second Byte */
    	if(fread(&byte,1,1,stdin))
    	{
	    generateBinary(byte,rawBinaryData2);

    	}

    	/* Adding 0 bit to additional byte in case of odd bytes */
    	else
    	{
	    for(int i =0 ; i<RAW_BIT_SIZE; i++)
	    rawBinaryData2[i]= 0 ;
       }

       generateEncodedByte(rawBinaryData1, rawBinaryData2, encodedByte);

       for(int i=0; i < 3; ++i)
       {
	   iter = i*8;
	   value= 0;

	   for(int j=0; j < RAW_BIT_SIZE; ++j)
	   {
	       exponent = RAW_BIT_SIZE-j-1;
	       multiplier = pow(2.00,exponent);
	       value = value + encodedByte[j+iter]*multiplier;	
	   }

	   outbyte = value;
	   fwrite(&outbyte,1,1,stdout);
       }
   }
}





int main(int argc,char *argv[]){

    encode();
    return 0;
}
@


1.4
log
@Final Testing and
Functionality Refinement
@
text
@d1 1
a1 1
//  $Id: encode.cpp,v 1.3 2013/02/07 18:49:52 axm3244 Exp axm3244 $
d8 4
a155 1
	   //std::cout<<outbyte;
a156 2
	//std::cout<<endl;
	//std::cout<<endl;
@


1.3
log
@Added Empty Check Function
@
text
@d1 1
a1 1
//  $Id: encode.cpp,v 1.2 2013/02/07 18:04:20 axm3244 Exp axm3244 $
d8 3
d83 1
d93 3
d152 1
d154 2
a155 1

a162 8

/*
 * Main Function
 * Program execution begins here and runs the command and passes
 * arguments in Encode.cpp
 * @@param takes two command line argumnet
 * @@return int
 */
@


1.2
log
@Added Bit Decoding and Reading of Bit
@
text
@d1 1
a1 1
//  $Id: encode.cpp,v 1.1 2013/01/30 02:32:17 axm3244 Exp axm3244 $
d8 3
d21 1
a21 9
# include<cstdlib>
# include<iostream>
# include<stdlib.h>
# include<math.h>
# include<cstdio>


const int ENCODED_BIT_SIZE = 24;
const int RAW_BIT_SIZE = 8;
a23 8


void generateBinary(char byte, int* rawBinaryData);
void generateEncodedByte(int* rawBinaryData1, int* rawBinaryData2, int* encodedByte);
void encode();



@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
//  $Id$
d7 4
a10 1
 *    $Log$
d17 163
@
